# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'suggestion.ui'
#
# Created by: PyQt5 UI code generator 5.15.7
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import csv
import os
import pandas as pd
from PyQt5.QtWidgets import QApplication, QDialog, QVBoxLayout, QLabel
import sys
import json
from PyQt5.QtGui import QPixmap
class Suggest_Dialog(object):
    def setupUi(self, Dialog, ID):
        Dialog.setObjectName("Dialog")
        Dialog.resize(420, 412)
        self.label = QtWidgets.QLabel(Dialog)
        self.label.setGeometry(QtCore.QRect(350, 330, 350, 100))
        self.label.setObjectName("label")

        pixmap = QPixmap('util/huohuo.png')
        self.label.setPixmap(pixmap)

        self.textBrowser = QtWidgets.QTextBrowser(Dialog)
        self.textBrowser.setGeometry(QtCore.QRect(50, 20, 256, 321))
        self.textBrowser.setObjectName("textBrowser")
        # self.textBrowser.setText("你好")
        self.retranslateUi(Dialog)
        QtCore.QMetaObject.connectSlotsByName(Dialog)


        # result = {'code': 200, 'msg': '操作成功', 'data': {'request_id': '8635237838435097871', 'task_id': '8635237838435097871', 'task_status': 'SUCCESS', 'choices': [{'role': 'assistant', 'content': '" 优势：\\n1. 物美价廉：商品的价格实惠，质量上乘，消费者对其性价比给予了高度评价。\\n2. 品质优良：产品的品质得到了消费者的认可，口感纯正，味道鲜美。\\n3. 服务周到：商品的包装完好，日期新鲜，分量足，食用方便快捷。\\n4. 口感正宗：消费者对商品的口感给予了好评，表示符合预期。\\n5. 发货快：物流速度得到了消费者的肯定。\\n\\n缺点：\\n1. 份量不足：有消费者反映每袋产品中，豆子占大部分重量，而牛肉的分量感觉还没有一碗牛肉面多。\\n2. 味道一般：虽然大部分消费者表示味道很好，但仍有一部分消费者认为味道一般般，觉得“也就那样吧”。\\n3. 商品描述与实际不符：有消费者反映商品描述中的照片与实际产品不符，照片看起来分量很多，但实际产品每袋只有几小块肠，豆子占大部分重量。\\n\\n改进建议：\\n1. 提升产品份量：在保证口感的前提下，可以适当增加产品的实际份量，让消费者感受到物有所值。\\n2. 优化商品描述：确保商品描述与实际产品相符，避免消费者在购买时产生误解。\\n3. 保持品质：继续保持产品的优良品质和口感，满足消费者的需求。"'}], 'usage': {'prompt_tokens': 197, 'completion_tokens': 288, 'total_tokens': 485}}, 'success': True}

        result = self.returnResult(ID)
        text = self.extract_advantages_and_disadvantages(result)
        self.textBrowser.setText(text)
        Dialog.setStyleSheet("background-color: #ffffff ;")
        from PyQt5.QtGui import QIcon
        Dialog.setWindowIcon(QIcon("util/huohuo.png"))
    def retranslateUi(self, Dialog):
        _translate = QtCore.QCoreApplication.translate
        Dialog.setWindowTitle(_translate("Dialog", "智能小助手"))
        # self.label.setText(_translate("Dialog", "TextLabel"))

    # def process_text(self, data):
    #     content = data['data']['choices'][0]['content']
    #     result = self.extract_advantages_and_disadvantages(content)
    #     print(result)
    #     self.textBrowser.setText(result)
        # self.layout.addWidget(QLabel('优点：'))
        # for advantage in advantages:
        #     self.layout.addWidget(QLabel(advantage))
        #
        # self.layout.addWidget(QLabel('缺点：'))
        # for disadvantage in disadvantages:
        #     self.layout.addWidget(QLabel(disadvantage))

    def extract_advantages_and_disadvantages(self, text):
        # parts = text.split('\\n\\n')

        # advantages = parts[0].split('\\n')[1:]
        # disadvantages = parts[1].split('\\n')[0:]
        # suggestion = parts[1].split('\\n')[0:]
        text = text['data']['choices'][0]['content']
        result = ""
        for i in range(len(text.split('\\n\\n'))):
            result = result + text.split('\\n\\n')[i].replace('\\n','')
        result.replace('" ','')
        return result

    def returnResult(self,ID):
        Excelfile = './LDA/result/{}.xlsx'.format(ID)
        df = pd.read_excel(Excelfile)
        topic = df['topic']
        # print(topic)
        zero_rows = df[df['topic'] == 0].index.tolist()  # 将'column_name'替换为你要筛选的列名
        # print(zero_rows)


        import random
        SampleData = []
        # 提取某一列等于0的行
        for j in range(7):
            try:
                zero_rows = df[df['topic'] == j]  # 将'column_name'替换为你要筛选的列名
                # 随机选取10行数据
                sampled_rows_0 = random.sample(zero_rows.index.tolist(), k=5)

                # print(sampled_rows)

                sampled_data_0 = df.loc[sampled_rows_0, ['评论内容']]  # 替换为其他列名

                print(sampled_data_0)

                for i in range(len(sampled_data_0)):
                    SampleData.append(sampled_data_0.iloc[i, 0])
            except:
                pass


        # print(SampleData)
        comment = "".join(SampleData)
        print("从下面的评论中得到这个产品的优势和缺点:"+comment)

        import zhipuai
        zhipuai.api_key ="a2c3696675d0914c53ce693fd9ab51a2.mHp0Uz5xbTB9OHAL"#填写控制台中获取的 APIKey 信息
        model ="chatglm_std"#用于配置大模型版本

        def getText(role, content, text = []):
            # role 是指定角色，content 是 prompt 内容
            jsoncon = {}
            jsoncon["role"] = role
            jsoncon["content"] = content
            text.append(jsoncon)
            return text

        question = getText("user", "分点概述，从下面的评论中得到这个产品的优势和缺点,给出商品改进建议"+comment)
        response = zhipuai.model_api.invoke(
            model=model,
            prompt=question
        )
        print(response)
        return response

if __name__ == "__main__":
    QtCore.QCoreApplication.setAttribute(QtCore.Qt.AA_EnableHighDpiScaling)

    app = QApplication(sys.argv)

    # 创建一个 QDialog 对象来显示界面
    dialog = QDialog()
    ID = "10099263767130"
    # 使用 Sale_Form 类来设置界面
    ui = Suggest_Dialog()
    ui.setupUi(dialog, ID)

    # 显示对话框
    dialog.show()


    sys.exit(app.exec_())